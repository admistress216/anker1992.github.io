[{"title":"api接口定义","date":"2018-10-10T06:42:15.000Z","path":"2018/10/10/api接口定义/","text":"1. REST API123456789Method URI Action Commentpost api/login store 登录post api/logout logout 退出登录get api/users index 获取用户列表get api/users/&#123;userid&#125; show 获取单个用户信息get api/users/&#123;userid&#125;/edit edit 编辑用户put api/users/&#123;userid&#125; update 更新用户delete api/users/&#123;userid&#125; destroy 删除用户 2. API详情2.1 登录 Method: postURI: api/login 入参 类型 是否必须 参数说明 默认值 例子 email string yes 用户名 无 lynch.bertram@example.com password string yes 加密密码 无 rtrim(strtr(base64_encode(‘password’), ‘+/‘, ‘-_’), ‘=’) 出参 类型 参数说明 access_token string 令牌 id int 用户id user_nickname string 用户昵称 avatar string 头像 2.2 退出登录 Method: postURI: api/logout 入参 类型 是否必须 参数说明 默认值 例子 access_token string yes 令牌 无 xxx.yyy.zzz 出参 类型 参数说明 2.3 获取单个用户信息 Method: getURI: api/users/{userid} 入参 类型 是否必须 参数说明 默认值 例子 id int yes 用户id 无 123 access_token string yes 令牌 无 xxx.yyy.zzz 出参 类型 参数说明 默认值 例子 user_name string 登录名 无 xiaoming user_nickname string 昵称 无 小明 mobile string 手机号 无 13312341234 email string 邮箱 无 xiaoming@163.com avatar string 头像 无 http://www.test.com/1.jpg role_name string 角色名称 无 系统管理员 company_name string 公司名称 无 央视新闻移动网 expirydate string 过期时间 无 2019-09-20 t_status string 状态(0:关闭,1:开启) 无 1 reporter_group_name string 部门分组 无 技术部/合作组 2.4 编辑用户信息 Method: getURI: api/users/{userid}/edit 入参 类型 是否必须 参数说明 默认值 例子 userid string yes 用户名 无 1 access_token string yes 令牌 无 xxx.yyy.zzz 出参 类型 参数说明 2.5 更新用户信息 Method: putURI: api/users/{userid} 入参 类型 是否必须 参数说明 默认值 例子 userid string yes 用户名 无 1 access_token string yes 令牌 无 xxx.yyy.zzz user_name string yes 登录名 无 xiaoming user_nickname string yes 昵称 无 小明 mobile string yes 手机号 无 13312341234 t_status string yes 状态(0:关闭,1:开启) 无 1 reporter_group_name yes string 部门分组 无 技术部/合作组 expirydate string yes 过期时间 无 2019-09-20 description string yes 描述 无 i am a description role_name string yes 角色名称 无 系统管理员 company_name string yes 公司名称 无 央视新闻移动网 user_password string yes 用户密码 无 $2y$10$jrYGOgJPS/Rs.AAVyesEE./Oq8coNKU/Is0yBV2KQGXlngZ6no6Di 出参 类型 参数说明 2.6 删除用户 Method: deleteURI: api/users/{userid} 入参 类型 是否必须 参数说明 默认值 例子 userid string yes 用户名 无 1 access_token string yes 令牌 无 xxx.yyy.zzz 出参 类型 参数说明","tags":[]},{"title":"dingo总结","date":"2018-10-08T03:07:48.000Z","path":"2018/10/08/dingo总结/","text":"1. api request示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// 1.1headerAccept: application/vnd.lumen.v1+json// 1.2.env文件API_PREFIX=apiAPI_STANDARDS_TREE=vndAPI_SUBTYPE=lumenAPI_VERSION=v1API_STRICT=falseAPI_DEFAULT_FORMAT=jsonAPI_DEBUG=true// 1.3route:/routes/api/v1.php$api = app('Dingo\\Api\\Routing\\Router'); // v1 version API // add in header Accept:application/vnd.lumen.v1+json$api-&gt;version('v1', [ 'namespace' =&gt; 'App\\Http\\Controllers\\Api\\V1', 'middleware' =&gt; [ 'cors', 'serializer', //'serializer:array', // if you want to remove data wrap 'api.throttle', ], // each route have a limit of 20 of 1 minutes 'limit' =&gt; 20, 'expires' =&gt; 1,], function ($api) &#123; // Auth // login $api-&gt;post('authorizations', [ 'as' =&gt; 'authorizations.store', 'uses' =&gt; 'AuthController@store', ]); $api-&gt;get('test', [ 'as' =&gt; 'test.index', 'uses' =&gt; 'TestController@index', ]);&#125;);// 1.4controller:/app/Http/Controllers/Api/V1/TestController.php&lt;?phpnamespace App\\Http\\Controllers\\Api\\V1;use Illuminate\\Http\\Request;use App\\Models\\Authorization;use App\\Transformers\\AuthorizationTransformer;class TestController extends BaseController&#123; public function index() &#123; echo 'index'; &#125;&#125;","tags":[]},{"title":"memcache扩展","date":"2018-10-07T07:10:34.000Z","path":"2018/10/07/memcache扩展/","text":"1. 安装memcached依赖libevent和下载源码包1yum install libevent libevent-devel 官方下载 2. 安装memcached2.1 创建memcached用户#useradd -d /var/run/memcached/ -s /sbin/nologin -c “Memcached daemon” memcached 2.2 解压源码包并编译安装#tar zxvf memcached-1.4.24.tar.gz #cd memcached-1.4.24 #./configure –prefix=/usr/local/memcached #make &amp;&amp; make install 2.3 添加service脚本#vi /etc/rc.d/init.d/memcached内容如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#! /bin/sh## chkconfig: - 55 45# description: The memcached daemon is a network memory cache service.# processname: memcached# config: /etc/sysconfig/memcached# pidfile: /var/run/memcached/memcached.pid# Standard LSB functions#. /lib/lsb/init-functions# Source function library.. /etc/init.d/functionsIP=127.0.0.1PORT=11211USER=memcachedMAXCONN=1024CACHESIZE=64OPTIONS=\"\"# Check that networking is up.. /etc/sysconfig/networkif [ \"$NETWORKING\" = \"no\" ]thenexit 0fiRETVAL=0prog=\"memcached\"pidfile=$&#123;PIDFILE-/var/run/memcached/memcached.pid&#125;lockfile=$&#123;LOCKFILE-/var/lock/subsys/memcached&#125;start () &#123;echo -n $\"Starting $prog: \"# Ensure that /var/run/memcached has proper permissionsif [ \"`stat -c %U /var/run/memcached`\" != \"$USER\" ]; then chown $USER /var/run/memcachedfidaemon --pidfile $&#123;pidfile&#125; /usr/local/memcached/bin/memcached -d -l $IP -p $PORT -u $USER -m $CACHESIZE -c $MAXCONN -P $&#123;pidfile&#125; $OPTIONSRETVAL=$?echo[ $RETVAL -eq 0 ] &amp;&amp; touch $&#123;lockfile&#125;&#125;stop () &#123;echo -n $\"Stopping $prog: \"killproc -p $&#123;pidfile&#125; /usr/local/memcached/binRETVAL=$?echoif [ $RETVAL -eq 0 ] ; then rm -f $&#123;lockfile&#125; $&#123;pidfile&#125;fi&#125;restart () &#123; stop start&#125;# See how we were called.case \"$1\" instart)start;;stop)stop;;status)status -p $&#123;pidfile&#125; memcachedRETVAL=$?;;restart|reload|force-reload)restart;;condrestart|try-restart)[ -f $&#123;lockfile&#125; ] &amp;&amp; restart || :;;*)echo $\"Usage: $0 &#123;start|stop|status|restart|reload|force- reload|condrestart|try-restart&#125;\"RETVAL=2 ;;esacexit $RETVAL 2.4启动并测试chmod a+x /etc/init.d/memcachedservice memcached starttelnet 127.0.0.1 11211stats退出stats和telnet ctrl+] quit 3. 安装php memcache3.1 安装依赖12345wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gztar zxf libmemcached-1.0.18.tar.gzcd libmemcached-1.0.18./configure --prefix=/usr/local/libmemcached --with-memcachedmake &amp;&amp; make install 3.2 下载安装php memcache扩展 注意:php7以外可以在pecl扩展库下载,下面介绍php7的情况12345678910111213git clone https://github.com/php-memcached-dev/php-memcached.gitcd php-memcachedgit checkout php7/usr/local/php/bin/phpize./configure --enable-memcached --with-php-config=/usr/local/php/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached --disable-memcached-saslmakemake install//php.ini中添加[Memcached]extension=memcached.so//重启php-fpmservice php-fpm restart","tags":[]},{"title":"mysql总结","date":"2018-10-04T16:34:56.000Z","path":"2018/10/05/mysql总结/","text":"1. 更改密码及导出123'mysqladmin -uroot -proot password + 新密码', //更改密码'mysql -uroot -p +数据库 &lt; +sql路径',//导入sql文件'mysqldump -uroot -p [-d] +数据库 &gt; sql文件', //导出sql文件,-d:no data(仅结构) 2. linux下mysql安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115groupadd mysqluseradd -g mysql -s /sbin/nologin -M mysql, //-s:定义shell,-M : 不建立根目录,-g:指定组mkdir -p /data/mysql/data,chown -R mysql:mysql /data/mysql,yum -y install gcc gcc-c++ cmake ncurses-devel bison,wget --no-check-certificate https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.39.tar.gz, //下载# cmake ./# -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\ #安装路径# -DMYSQL_DATADIR=/usr/local/mysql/data \\ #数据文件存放位置# -DSYSCONFDIR=/etc \\ #my.cnf路径# -DWITH_MYISAM_STORAGE_ENGINE=1 \\ #支持MyIASM引擎# -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ #支持InnoDB引擎# -DWITH_MEMORY_STORAGE_ENGINE=1 \\ #支持Memory引擎# -DWITH_READLINE=1 \\ #快捷键功能(我没用过)# -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \\ #连接数据库socket路径# -DMYSQL_TCP_PORT=3306 \\ #端口# -DENABLED_LOCAL_INFILE=1 \\ #允许从本地导入数据# -DWITH_PARTITION_STORAGE_ENGINE=1 \\ #安装支持数据库分区# -DMYSQL_USER=mysql \\ #mysqld运行用户# -DEXTRA_CHARSETS=all \\ #安装所有的字符集# -DDEFAULT_CHARSET=utf8 \\ #默认字符# -DDEFAULT_COLLATION=utf8_general_ci# make &amp;&amp; make installcmake ./ \\-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\-DMYSQL_DATADIR=/data/mysql/data \\-DSYSCONFDIR=/etc \\-DWITH_MYISAM_STORAGE_ENGINE=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DMYSQL_UNIX_ADDR=/data/mysql/mysqld.sock \\-DMYSQL_TCP_PORT=3306 \\-DENABLED_LOCAL_INFILE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DMYSQL_USER=mysql \\-DEXTRA_CHARSETS=all \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_cimake&amp;&amp;make install,chown -R mysql:mysql /usr/local/mysql/,mv /usr/local/src/mysql-5.6.39/support-files/my-default.cnf /etc/my.cnf //选择覆盖mv /usr/local/src/mysql-5.6.39/support-files/mysql.server /etc/init.d/mysqld //服务端启动放入服务中service mysqld startchmod a+x /etc/init.d/mysqld,chkconfig --level 345 mysqld on, //开机启动echo \"export PATH=/usr/local/mysql/bin/:$PATH\" &gt;&gt; /etc/profilesource /etc/profile //设置环境变量,方便客户端启动//初始化设置(user,配置文件,基础目录,数据目录)/usr/local/mysql/scripts/mysql_install_db \\--user=mysql \\--defaults-file=/etc/my.cnf \\--basedir=/usr/local/mysql \\--datadir=/data/mysql/datavim /etc/my.cnf[mysqld]user=mysqlbasedir=/usr/local/mysqldefault-storage-engine=Innodbdatadir=/data/mysql/data //放置于mysql模块socket=/data/mysql/mysql.sock[mysql]socket=/data/mysql/mysql.sock //注意放在最下方service mysqld reloadservice mysqld start/usr/bin/mysqladmin -u root password \\'z\\' //修改密码mysql -u root -p -P port //登录说明:参数说明:-DCMAKE_INSTALL_PREFIX=/usr/local/mysql //安装目录-DMYSQL_DATADIR=/usr/local/mysql/data //数据库存放目录-DWITH_MYISAM_STORAGE_ENGINE=1 //安装myisam存储引擎-DWITH_INNOBASE_STORAGE_ENGINE=1 //安装innodb存储引擎-DWITH_ARCHIVE_STORAGE_ENGINE=1 //安装archive存储引擎-DWITH_BLACKHOLE_STORAGE_ENGINE=1 //安装blackhole存储引擎-DENABLED_LOCAL_INFILE=1 //允许从本地导入数据-DDEFAULT_CHARSET=utf8 //使用utf8字符-DDEFAULT_COLLATION=utf8_general_ci //校验字符-DEXTRA_CHARSETS=all //安装所有扩展字符集-DMYSQL_TCP_PORT=3306 //MySQL监听端口-DMYSQL_USER=mysql //MySQL用户名其他参数:-DWITH-EMBEDDED_SERVER=1 //编译成embedded MySQL library (libmysqld.a)-DSYSCONFDIR=/etc //MySQL配辑文件-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock //Unix socket 文件路径-DWITH_READLINE=1 //快捷键功能-DWITH_SSL=yes //SSL-DWITH_MEMORY_STORAGE_ENGINE=1 //安装memory存储引擎-DWITH_FEDERATED_STORAGE_ENGINE=1 //安装frderated存储引擎-DWITH_PARTITION_STORAGE_ENGINE=1 //安装数据库分区-DINSTALL_PLUGINDIR=/usr/local/mysql/plugin //插件文件及配置路径 3. 设置权限12GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456aA' WITH GRANT OPTION;flush privileges; 4.pdo4.1 pdo类lt;?php/** * Created by PhpStorm. * User: tc-net * Date: 2016/8/11 0011 * Time: 16:32 */class MysqlPDO&#123; //获取对象句柄 protected $message = 'Unknown exception'; // 异常信息 protected static $_instance = null; protected $dbh; protected $where = ''; protected $wheredata = array(); protected $order = ''; private function __construct($param) &#123; try &#123; //echo 'mysql:host=' . $param['hostname'] . ';port=' . $param['port'] . ';dbname=' . $param['database'], $param['username'], $param['password'];exit; $this-&gt;dbh = new PDO ( 'mysql:host=' . $param['hostname'] . ';port=' . $param['port'] . ';dbname=' . $param['database'], $param['username'], $param['password'], array (PDO::ATTR_PERSISTENT =&gt; false,PDO::MYSQL_ATTR_INIT_COMMAND =&gt; \"set names utf8mb4;\") );// self::$PDOInstance-&gt;query(\"SET client_encoding='UTF-8';\");// self::$PDOInstance-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);// self::$PDOInstance-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); &#125; catch ( PDOException $e ) &#123; throw new Exception('MySQL Error: '.$e-&gt;getMessage ()); exit; &#125; &#125; public function clearWhere()&#123; $this-&gt;where = ''; $this-&gt;wheredata = array(); &#125; private function error($stmt)&#123; $erorr = $stmt-&gt;errorInfo(); $this-&gt;message = \"mysql ERROR:\".$erorr[1].\" \".$erorr[2]; throw new Exception($this-&gt;message); &#125; /** * 防止克隆 * */ private function __clone() &#123;&#125; /** * 单例 * */ public static function getInstance($param,$instance='default')&#123; if (!isset(self::$_instance[$instance])||self::$_instance[$instance] === null) &#123; self::$_instance[$instance] = new self($param); &#125; return self::$_instance[$instance]; &#125; public function where($field,$val)&#123; $this-&gt;where[] = preg_match('/[=&gt;&lt;]/i',$field)?\"`&#123;$field&#125;`\":\"`&#123;$field&#125;`=\"; if(is_array($val))&#123; $this-&gt;wheredata = array_merge($this-&gt;wheredata,$val); &#125;else&#123; array_push($this-&gt;wheredata,$val); &#125; &#125; public function like_where($field,$val)&#123; $this-&gt;where[] = \"`&#123;$field&#125;` like \"; if(is_array($val))&#123; $this-&gt;wheredata = array_merge($this-&gt;wheredata,$val); &#125;else&#123; array_push($this-&gt;wheredata,$val); &#125; &#125;// public function orderby($field,$sort)&#123;// $this-&gt;order = \"ORDER BY `&#123;$field&#125;` &#123;$sort&#125;\";// &#125;// public function select($tablename,$fields='*')&#123;// $wheresql = !empty($this-&gt;where)?\" WHERE \".implode(\"? AND \",$this-&gt;where).\"?\":'';// $sql = \"SELECT &#123;$fields&#125; FROM &#123;$tablename&#125; &#123;$wheresql&#125;\";// $stmt = $this-&gt;dbh-&gt;prepare($sql);// $r = $stmt-&gt;execute();// return $r!==false?true:false;// &#125; /** * @param $tablename 表名 * @param $data array 数据 * @return bool */ public function update($tablename,$data)&#123; //防止全表更改 if(empty($this-&gt;where))&#123; return false; &#125; if(empty($data)||!is_array($data))&#123; return false; &#125; $setsql = ''; foreach($data as $k=&gt;$v)&#123; $setsql .= \"`&#123;$k&#125;`=?,\"; &#125; $setsql = trim($setsql,','); $wheresql = implode(\"? AND \",$this-&gt;where).\"?\"; $sql = \"UPDATE &#123;$tablename&#125; SET &#123;$setsql&#125; WHERE &#123;$wheresql&#125;\"; $data = array_values($data); $data = array_merge_recursive($data,$this-&gt;wheredata); $stmt = $this-&gt;dbh-&gt;prepare($sql); $r = $stmt-&gt;execute($data); return $r!==false?true:false; &#125; /** * @param $tablename * @param $data array() * @return bool|string */ public function replace($tablename,$data)&#123; if(empty($data)||!is_array($data))&#123; return false; &#125; $setsql = ''; $vals = ''; foreach($data as $k=&gt;$v)&#123; $setsql .= \"`&#123;$k&#125;`,\"; $vals .=\"?,\"; &#125; $setsql = trim($setsql,','); $vals = trim($vals,','); $sql = \"REPLACE into &#123;$tablename&#125;(&#123;$setsql&#125;) VALUES ($vals)\"; $stmt = $this-&gt;dbh-&gt;prepare($sql); if($stmt-&gt;execute(array_values($data)))&#123; return $this-&gt;dbh-&gt;lastInsertId(); &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return false; &#125; public function insert($tablename,$data)&#123; if(empty($data)||!is_array($data))&#123; return false; &#125; $setsql = ''; $vals = ''; foreach($data as $k=&gt;$v)&#123; $setsql .= \"`&#123;$k&#125;`,\"; $vals .=\"?,\"; &#125; $setsql = trim($setsql,','); $vals = trim($vals,','); $sql = \"INSERT INTO &#123;$tablename&#125;(&#123;$setsql&#125;) VALUES ($vals)\"; // echo $sql;exit; $stmt = $this-&gt;dbh-&gt;prepare($sql); $data = is_array($data)?array_values($data):array($data); if($stmt-&gt;execute(array_values($data)))&#123; return $this-&gt;dbh-&gt;lastInsertId(); &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return false; &#125; /** * 获取总数 * @param $sql * @param $param * @return bool */ public function getTotal($sql,$param='')&#123; $stmt = $this-&gt;dbh-&gt;prepare($sql); $param = !empty($param)&amp;&amp;is_array($param)?array_values($param):array($param); //var_dump($stmt-&gt;execute($param)); if ($stmt-&gt;execute($param)) &#123; $data = $stmt-&gt;fetch(PDO::FETCH_NUM); return $data[0]; &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return false; &#125; /** * 执行非查询操作 * @param $sql * @param string $param * @return bool|string */ public function exec($sql,$param='')&#123; $stmt = $this-&gt;dbh-&gt;prepare($sql); $param = !empty($param)&amp;&amp;is_array($param)?array_values($param):array($param); if ($stmt-&gt;execute($param)) &#123; $id = $this-&gt;dbh-&gt;lastInsertId(); return $id?$id:TRUE; &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return false; &#125; public function query($sql,$param='')&#123; $stmt = $this-&gt;dbh-&gt;prepare($sql); if(!empty($param))&#123; $param = !empty($param)&amp;&amp;is_array($param)?array_values($param):array($param); &#125; if ($param?$stmt-&gt;execute($param):$stmt-&gt;execute()) &#123; $data = $stmt-&gt;fetchAll(PDO::FETCH_OBJ); return $data?$data:array(); &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return false; &#125; public function getOne($sql,$param='')&#123; $data = array(); $stmt = $this-&gt;dbh-&gt;prepare($sql); if(!empty($param))&#123; $param = !empty($param)&amp;&amp;is_array($param)?array_values($param):array($param); &#125; if ($param?$stmt-&gt;execute($param):$stmt-&gt;execute()) &#123; $data = $stmt-&gt;fetch(PDO::FETCH_OBJ); &#125;else&#123;// var_dump($stmt-&gt;errorInfo());exit; $this-&gt;error($stmt); &#125; return $data?$data:array(); &#125; /** * beginTransaction 事务开始 */ public function beginTransaction() &#123; $this-&gt;dbh-&gt;beginTransaction(); &#125; /** * commit 事务提交 */ public function commit() &#123; $this-&gt;dbh-&gt;commit(); &#125; /** * rollback 事务回滚 */ public function rollback() &#123; $this-&gt;dbh-&gt;rollback(); &#125; /** * checkFields 检查指定字段是否在指定数据表中存在 * * @param String $table * @param array $arrayField */ public function checkFields($table, $arrayFields)&#123; $fields = $this-&gt;getFields($table); foreach ($arrayFields as $key =&gt; $value) &#123; if (!in_array($key, $fields)) &#123; return false; &#125;else&#123; return true; &#125; &#125; &#125; /** * getFields 获取指定数据表中的全部字段名 * * @param String $table 表名 * @return array */ private function getFields($table)&#123; $fields = array(); $recordset = $this-&gt;dbh-&gt;query(\"SHOW COLUMNS FROM $table\"); $this-&gt;getPDOError(); $recordset-&gt;setFetchMode(PDO::FETCH_ASSOC); $result = $recordset-&gt;fetchAll(); foreach ($result as $rows) &#123; $fields[] = $rows['Field']; &#125; return $fields; &#125; /** * destruct 关闭数据库连接 */ public function __destruct()&#123; $this-&gt;dbh = null; self::$_instance = null; &#125;&#125; 4.2 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?php$active_group = 'default';$query_builder = TRUE;$db['default'] = array(// 'hostname' =&gt; '172.31.16.8',// 'username' =&gt; 'cctvnewsplatform',// 'password' =&gt; '!Q@W#E$R', 'hostname' =&gt; 'localhost', 'username' =&gt; 'root', 'password' =&gt; '123456aA', 'database' =&gt; 'test', 'dbprefix' =&gt; '', 'port' =&gt; '3306', 'pconnect' =&gt; FALSE, 'cache_on' =&gt; FALSE, 'cachedir' =&gt; '', 'char_set' =&gt; 'utf8', 'dbcollat' =&gt; 'utf8_general_ci',);$db['db_slave'] = array( 'hostname' =&gt; '', 'username' =&gt; '', 'password' =&gt; '', 'database' =&gt; 'cctvnewsplatform', 'dbprefix' =&gt; 'cctvnewsplatform_', 'port' =&gt; '3306', 'pconnect' =&gt; FALSE, 'cache_on' =&gt; FALSE, 'cachedir' =&gt; '', 'char_set' =&gt; 'utf8mb4', 'dbcollat' =&gt; 'utf8mb4_general_ci',);$db['vgc'] = array( 'hostname' =&gt; '', 'username' =&gt; '', 'password' =&gt; '', 'database' =&gt; 'cctvnews', 'dbprefix' =&gt; '', 'port' =&gt; '3306', 'char_set' =&gt; 'utf8mb4', 'dbcollat' =&gt; 'utf8mb4_general_ci',);$db['log'] = array( 'hostname' =&gt; '', 'username' =&gt; 'log', 'password' =&gt; '', 'database' =&gt; 'log', 'dbprefix' =&gt; 'cctvnewsplatform_', 'port' =&gt; '3306', 'pconnect' =&gt; FALSE, 'cache_on' =&gt; FALSE, 'cachedir' =&gt; '', 'char_set' =&gt; 'utf8', 'dbcollat' =&gt; 'utf8_general_ci',);","tags":[]},{"title":"linux深入总结","date":"2018-10-02T19:44:50.000Z","path":"2018/10/03/linux深入总结/","text":"1. 编程层次硬件规格(Hardware Specification)系统调用(System Call)库调用(Library Call) 2. user interface(UI):用户接口GUI:Graphic User Interface(图像用户接口)CLI:Command Line Interface(命令行接口)ABI:Application Binary Interface(运行接口):程序编译成二进制可执行文件所使用的接口API:Application Programing Interface(编程应用接口):比如程序未编译前所使用的接口 3.书籍&lt;&lt;奇点临近&gt;&gt; 4.运行程序格式:Windows:EXE,dll(dynamic link library) Linux:ELF,so(shared object) 5.Linux发行版slackware suse opensuse debian ubantu mint redhat rhel:redhat enterprise linux 每18个月发行一次新版本 CentOs:兼容rhel版本 fedora:测试新软件,每6个月发型一个新版本 ArchLinux Gentoo:更好的发挥硬件性能,比较难 LFS:Linux From Scratch(linux book):linux怎么制作教程 Android:kernel+busybox+java虚拟机 6.问题6.1 CentOS和Linux是什么关系?CentOs和RHEL是什么关系?6.2 各种开源协议的具体细节?GPL,LGPL,Apache,BSD 7.程序包管理器:rpm: RHEL,Fedora,S.u.E.E,Centos dpt: Debian,Ubuntu 6.概念解释GNU:gnu is not unix gpl:gnu general public lisence自由软件许可证 其他协议:apache,bsd,比gpl好 7.获取发行版本:mirrors.aliyun/souhu/163.com 8.打开图形界面startx &amp; 9.命令echo $SHELL: 查看当前使用shellcat /etc/shells: 查看系统支持shelltype command: 区别内部或外部命令 9.1 hash命令hash: 缓存使用的命令路径于hash表,提高命令的调用速率hash [-l]: 显示hash表内的内容hash (-d name)/-r: 清除单个/全部缓存命令注:在命令已缓存的情况下,移动命令路径,会出现找不到命令的错误(即使命令在path中),解决方法: 重新登录终端或者删除缓存命令 9.2 帮助命令1234567891011121314# 内部命令help command# 外部命令&lt;1&gt; command --help/-h&lt;2&gt; 使用手册: man command&lt;3&gt; 信息页: info command&lt;4&gt; 程序自身帮助文档(一般在/usr/share/doc/COMMAND-VERSION): README,INSTALL,ChangeLog&lt;5&gt; 程序官方文档(Documentation)&lt;6&gt; 发行版的官方文档(http://www.redhat.com/docs)&lt;7&gt; google.cn (openstack filetype:pdf):搜索全部为pdf格式的openstack (openstack site:openstack.com):指明站点搜索&lt;8&gt;(http://www.slideshare.net):pdf/ppt教程 9.3 man帮助详解1234567891011121314151617181920212223man COMMAND// 手册页所在位置/usr/share/man(大多数手册,具体位置在/etc/man.config中的MANPATH定义)// man1.....man8介绍man1: 用户命令man2: 系统调用man3: C库调用man4: 设备文件及特殊文件man5: 配置文件格式man6: 游戏man7: 杂项man8: 管理类命令man -M path command //在指定目录下查找命令,如果目录为空,效果和没有-M参数一样//man命令段落说明SYNOPSIS(概要): []: 可选内容 &lt;&gt;:必选内容 a|b:二选一 ...:同一内容可多次出现 注意:有些命令在不知一个章节中存放帮助手册(whereis read),要查看指定章节中的手册: man # command 9.4 history命令1234567# 命令文件存放于~/.bash_history中,history命令显示的记录(cache中)会在logout时写入~/.bash_historyhistory -a: 将缓存中的命令追加于文件中history -d offset: 删除offset处的命令(cache中)history -c: 删除所有(cache中)!#: 调用历史中第#条命令!command: 调用历史中以command开始的命令","tags":[]},{"title":"laravel总结","date":"2018-09-26T06:19:52.000Z","path":"2018/09/26/laravel总结/","text":"1.目录结构2.路由1234567891011121314151617181920212223242526272829303132333435363738Route::get/post/put/patch/delete/options($uri, $callback);Route::match(['get', 'post'], '/test', $callback);Route::any('/test', $callback);//参数Route::get('user/&#123;id&#125;', function($id)&#123; return \"User \".$id;&#125;);//可选参数(默认值)Route::get('user/&#123;id?&#125;', function($id=null)&#123; return \"User \".$id;&#125;);//正则筛选Route::get('user/&#123;id?&#125;', function($id=null)&#123; return \"User \".$id;&#125;)-&gt;where('id', '[0-9]+'); //id为int型//控制器Route::get('user/&#123;id&#125;', 'Admin\\IndexController@index');//命令行创建控制器php artisan make:controller Admin/IndexController//路由命名Route::get('user', ['as' =&gt; 'profile', function()&#123; echo route('profile'); //http://192.168.200.128/user(地址) return \"路由命名\";&#125;]);//在控制器中也可使用route(),view()函数Route::get('user', ['as' =&gt; 'profile', 'uses' =&gt; 'Admin\\IndexController@index']);Route::get('user', 'Admin\\IndexController@index')-&gt;name('profile');//路由分组，访问http://192.168.200.128/admin/login会路由到Admin\\IndexController@login方法Route::group(['prefix' =&gt; 'admin', 'namespace' =&gt; 'Admin'], function()&#123; Route::get('login', 'IndexController@login'); Route::get('index', 'IndexController@index');&#125;);//资源路由,自动生成article/create(index/delete)等方法Route::resource('article', 'Admin\\ArticleController'); 3.中间件(路由前过滤作用)12345678910111213//命令生成中间件,在app/Http/Middleware中生成AdminLogin.php中间件文件php artisan make:middleware AdminLogin//App\\Http\\Kernel中追加:protected $routeMiddleware = [ 'admin.login' =&gt; \\App\\Http\\Middleware\\AdminLogin::class,];//路由中使用:Route::group(['middleware' =&gt; ['admin.login']], function()&#123; Route::get('/', function () &#123; session(['key' =&gt; 123]); return view('welcome'); &#125;);&#125;); 4.视图123456789101112131415161718192021222324252627282930313233343536373839404142//1.分配视图并传参(一般传递数组)return view('index')-&gt;with('name', $name)-&gt;with('age', $age);$data = [ 'name' =&gt; 'haha', 'age' =&gt; 5];return view('index', $data);//多参数:$title = \"thie is a title\";return view('index', compact('data','title'));//参数使用(模板中)&lt;?php echo $data['name'].'----'.$title; ?&gt;//使用blade模板引擎(用@屏蔽),默认值(传值为null时)用or创建&#123;&#123;$data['name']&#125;&#125;---&#123;&#123;title or 'XXX'&#125;&#125;//不转实体&#123;!! $script !!&#125;//判断变量是否存在&#123;&#123;isset($name) ? $name : 'default'&#125;&#125;//blade模板引擎 if(unless),foreach,for,forelse,@include@if()....@else....@endif@for()....@endfor@foreach().....@endforeach@forelse()...@empty....@endforelse@include('common.header', ['page' =&gt; '首页']) //引入公共部分,第二个参数可没有@yield('content') //公共模板中引入content部分 //子视图中 @extends('layouts.home') //引入公共文件 @section('content') @endsection 5.配置读取及数据库1234567config('database.connections.mysql.prefix')$pdo = DB::connection()-&gt;getPdo();dd($pdo); //类似于print_r()$users = DB::table('user')-&gt;where('user_id', '&gt;', 1)-&gt;get();dd($users); 6.模型1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//接收数据/$input = Input::all();//新建php artisan make:model User//模型中配置表和主键protected $table = \"user\";protected $primaryKey = 'user_id';//控制器中使用模型$user = User::find(1);$user-&gt;user_name = 'wangwu';$user-&gt;update(); //更新//禁用updated_at字段public $timestamps = false;//非递增主键public $incrementing = false;//主键为字符串而非int型protected $keyType = string;//禁用updated_at,created_at字段public $timestamps = false;//自定义时间戳const CREATED_AT = 'creation_data';const UPDATED_AT = 'last_update';//可以被批量赋值的属性,只有批量赋值的属性才可通过create()添加数据protected $fillable = ['name']; //允许name属性可以批量赋值//不可以批量赋值的属性protected $guarded = ['price'];$flight = Flight::create(['name' =&gt; 'Flight 10']);//已有模型$flight-&gt;fill(['name' =&gt; 'Flight 22']);$user = User::all(); //返回模型表中所有的结果$user = User::where('active', 1) -&gt;orderBy('name', 'desc') -&gt;take(10) //take相当于limit,skip相当于offset -&gt;get();$user = User::where('active', 1)-&gt;first(); //first相当于find$user = User::find([1,2,3]);//聚合函数$count = User::where('active', 1)-&gt;count();$price = User::where('active', 1)-&gt;max('price');//插入$user = new User;$user-&gt;name = $name;$user-&gt;save();//更新$flight = Flight::find(1);$flight-&gt;name = 'New';$flight-&gt;save();Flight::where('active', 1) -&gt;where('destination', 'San Diego') -&gt;update(['delay' =&gt; 1]); //需要传入键值对数组//删除$flight = Flight::find(1);$flight-&gt;delete();Flight::destroy(1,2,3);Flight::destroy([1,2,3]);$deletedRows = Flight::where('active', 0)-&gt;delete(); 7.清除缓存7.1 清除视图缓存php artisan view:clear 7.2 清除运行缓存php artisan cache:clear 7.3 清除配置缓存php artisan config:clear 8.方法//引入静态文件asset()//引入地址url()//返回到前一个页面back()//参数传递with()//加解密Crypt::encrypt($str)Crypt::decrypt($str)//重定向redirect($url); 9.request1234567891011121314151617181920212223242526272829303132/***基于Illuminate\\Http\\Request*///获取所有参数并放于数组中$request-&gt;all();//获取相应字段,get,post等均可$request-&gt;input('name', 'lizengcai'); //第二个参数用于默认值$request-&gt;input('products.*.name'); //获取数组的值$request-&gt;has('name'); //数据存在返回true$request-&gt;only(['name', 'post']);$request-&gt;except('name'); //接收部分参数,参数可以为数组或字符串//路由参数接收 $api-&gt;post('test/&#123;id&#125;', [ //路由 'as' =&gt; 'test.index', 'uses' =&gt; 'TestController@index', ]); public function test(Request $request, $id)&#123;&#125; //controller方法//以http://laravel_api.com/api/test/3?b=c为例//返回请求的uri$uri = $request-&gt;path(); // /api/test/3//对uri进行匹配$request-&gt;is('api/*'); // true//完整网址$url = $request-&gt;url(); // http://laravel_api.com/api/test/3$fullUrl = $request-&gt;fullUrl(); //http://laravel_api.com/api/test/3?b=c//方法$method = $request-&gt;method(); //post$request-&gt;isMethod('post'); //true","tags":[]},{"title":"$明朝那些事$总结","date":"2018-09-20T14:53:57.000Z","path":"2018/09/20/明朝那些事-总结/","text":"","tags":[]},{"title":"php-fpm总结","date":"2018-09-07T16:01:18.000Z","path":"2018/09/08/php-fpm总结/","text":"1. /etc/init.d和/etc/rc.local/etc/init.d: 系统进程管理,command有start,stop,restart,reload等/etc/rc.local: 开机启动 2. /etc/init.d/php-fpm脚本内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini# Source function library.. /etc/rc.d/init.d/functionsPHP_PATH=/usr/localDESC=\"php-fpm daemon\"NAME=php-fpmNAME1=php-fpm-www1NAME2=php-fpm-www2# php-fpm路径DAEMON=$PHP_PATH/php/sbin/$NAME# 配置文件路径CONFIGFILE1=$PHP_PATH/php/etc/$NAME1.confCONFIGFILE2=$PHP_PATH/php/etc/$NAME2.conf# PID文件路径(在php-fpm.conf设置)PIDFILE1=$PHP_PATH/php/var/run/$NAME1.pidPIDFILE2=$PHP_PATH/php/var/run/$NAME2.pidSCRIPTNAME=/etc/init.d/$NAME# Gracefully exit if the package has been removed.test -x $DAEMON || exit 0rh_start() &#123; $DAEMON -y $CONFIGFILE1 || echo -e \" already running\" $DAEMON -y $CONFIGFILE2 || echo -e \" already running\"&#125;rh_stop() &#123; kill -QUIT `cat $PIDFILE1` || echo -e \" not running\" kill -QUIT `cat $PIDFILE2` || echo -e \" not running\"&#125;rh_reload() &#123; kill -HUP `cat $PIDFILE1` || echo -e \" can't reload\" kill -HUP `cat $PIDFILE2` || echo -e \" can't reload\"&#125;case \"$1\" in start) echo -e \"Starting $DESC: $NAME1\" echo -e \"Starting $DESC: $NAME2\" rh_start echo \".\" ;; stop) echo -e \"Stopping $DESC: $NAME1\" echo -e \"Stopping $DESC: $NAME2\" rh_stop echo \".\" ;; reload) echo -e \"Reloading $DESC configuration...\" rh_reload echo \"reloaded.\" ;; restart) echo -e \"Restarting $DESC: $NAME1\" echo -e \"Restarting $DESC: $NAME2\" rh_stop sleep 1 rh_start echo \".\" ;; *) echo \"Usage: $SCRIPTNAME &#123;start|stop|restart|reload&#125;\" &gt;&amp;2 exit 3 ;;esac 3. 配置3.1 php-fpm-www1.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556[global]pid = /usr/local/php/var/run/php-fpm-www1.piderror_log =/usr/local/php/var/log/php-fpm-www1.log; Possible Values: alert, error, warning, notice, debuglog_level = warningemergency_restart_threshold = 10emergency_restart_interval = 60sprocess_control_timeout = 5sprocess.max = 2048daemonize = yesrlimit_files = 65536rlimit_core = 0events.mechanism = epoll; Default value: 10;systemd_interval = 10[www1]user = wwwgroup = www;fpm监听端口/套接字,/dev/shm是个tmpfs,速度比磁盘快的多listen = /dev/shm/php5-fpm-www1.socklisten.backlog = 65535;运行用户listen.owner = www;运行组listen.group = www;运行用户和组所使用的权限listen.mode = 0660;子进程数固定pm = static;进程数量(static)/最大数量(dynamic)pm.max_children = 200;多久后空闲结束进程,仅当pm设置为ondemand时有效pm.process_idle_timeout = 30s;子进程重生之前服务的请求数量pm.max_requests = 20000; The access log file; Default: not setaccess.log = /usr/local/php/var/log/$pool.access.logslowlog = /usr/local/php/var/log/$pool.log.slowrequest_slowlog_timeout = 5srequest_terminate_timeout = 3mrlimit_files = 65000;使用 php_admin_value 或者 php_admin_flag 定义的值，不能被 PHP 代码中的 ini_set() 覆盖php_admin_value[error_log] = /usr/local/php/var/log/fpm-php.www1.log;重定向运行过程中的 stdout 和 stderr 到主要的错误日志文件中。如果没有设置，stdout 和 stderr 将会根据 FastCGI 的规则被重定向到 /dev/null。默认值：无。catch_workers_output = yes 3.2 php-fpm-www2.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546[global]pid = /usr/local/php/var/run/php-fpm-www2.piderror_log =/usr/local/php/var/log/php-fpm-www2.log; Possible Values: alert, error, warning, notice, debuglog_level = warningemergency_restart_threshold = 10emergency_restart_interval = 60sprocess_control_timeout = 10sprocess.max = 2048daemonize = yesrlimit_files = 65536rlimit_core = 0events.mechanism = epoll; Default value: 10;systemd_interval = 10[www2]user = wwwgroup = wwwlisten = /dev/shm/php5-fpm-www2.socklisten.backlog = 65535listen.owner = wwwlisten.group = wwwlisten.mode = 0660pm = staticpm.max_children = 200pm.process_idle_timeout = 30spm.max_requests = 20000; The access log file; Default: not setaccess.log = /usr/local/php/var/log/$pool.access.logslowlog = /usr/local/php/var/log/$pool.log.slowrequest_slowlog_timeout = 5srequest_terminate_timeout = 3mrlimit_files = 65000php_admin_value[error_log] = /usr/local/php/var/log/fpm-php.www2.logcatch_workers_output = yes 3.3 rc.local1/etc/init.d/php-fpm start #追加 4.配置解析","tags":[]},{"title":"vim总结","date":"2018-09-04T08:38:11.000Z","path":"2018/09/04/vim总结/","text":"1. 树形目录插件NERDTree 1.1 下载及安装1234567wget http://www.vim.org/scripts/download_script.php?src_id=17123 -O nerdtree.zip unzip nerdtree.zip mkdir -p ~/.vim/&#123;plugin,doc&#125; cp plugin/NERD_tree.vim ~/.vim/plugin/cp doc/NERD_tree.txt ~/.vim/doc/ 1.2 使用安装好后,直接在vim中输入:NERDTree,即可看到目录结构. 1.3 快捷方式配置在~/.vimrc中添加一下内容:123\"按F3即可显示/隐藏目录map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt; 2. 设置选项123456help 'option': 搜索设置选项(option可为hls,is等)set showmode/noshowmode: 设置是否显示模式set hls/hlsearch(highlight search): 设置高亮set is/incsearch(incurrent search): 实时显示set ic/ignorecase: 忽略大小写set ruler: 右下角显示光标的位置 3. 常用按键设置123456789101112x/X:删除光标下/光标前的字符i/a/A:在光标之前/之后/词尾插入diw/daw/dw:(删除光标所在的字符,不包括/包括空白字符)/(删除从光标开始到下个单词词首的所有)D:删除导航为的内容I/A:在当前行首/行尾插入w/e/b/ge:(下个单词词首/词尾)/(上个单词词首/词尾)0/^:移动到行首/非空行首2$:光标移动到下一行的行尾[number]f/F+character:当前行向左/向右查找字符并移动到字符位置,可以通过;/,来向后/向前重复移动H/M/L:移动到所见内容的(屏幕内)首部,中部,尾部zb/zz/zt:光标所在的行移动到底部/中部/顶部*/#: 光标所在单词取出并作为向前/向后查找对象","tags":[]},{"title":"js总结","date":"2018-08-28T05:53:51.000Z","path":"2018/08/28/js总结/","text":"","tags":[]},{"title":"redis总结","date":"2018-08-18T03:56:29.000Z","path":"2018/08/18/redis总结/","text":"1.what is redis?Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. redis和memcache的独特之处： redis可以用来做存储(storage),而memcache只能用来做存储(cache)[这个特性源于redis的持久化功能] memcache只能存储strings类型的数据,而redis可以存储strings,hashes,lists,sets,sorted set等数据 2.下载及安装下载地址: redis官网安装:123456789//必要环境: yum -y install gcc tcl //tcl用于make testmakemake install PREFIX=/usr/local/rediscp /usr/local/src/redis-4.0.11/redis.conf /usr/local/redis/bin修改配置:daemonize yes启动:./redis-server redis.conf 注意:如make时出现jemalloc/jemalloc.h错误,运行make MALLOC=libc指定分配器为libc即可也可进行jemalloc安装:在https://github.com/jemalloc/jemalloc/releases下载jemalloc进行编译安装:./configure –prefix=/usr/local/jemalloc &amp;&amp; make &amp;&amp; make install将jemalloc库写入系统:echo /usr/local/jemalloc/lib &gt;&gt; /etc/ld.so.conf &amp;&amp; ldconfigok 3.redis目录文件解释 redis-benchmark: redis性能检测工具redis-check-aof: 检查aof日志工具reids-check-dump: 检查rbd日志工具 4.常用操作4.1 通用命令12345678910111213141516keys * : 查询所有(s*:查询以s开头的键,?匹配符也支持,sit[e|y]:查询site或sity)flushall: 清除所有db中的keyflushdb: 清除当前db中的keyrandomkey: 返回随机keytype key: 返回key的类型exists key: 判断key是否存在del key [key]: 删除keyrename key newkey: 重命名keyrenamenx key newkey: 新key存在则不覆盖move key db: 移动key到新dbselect db: 切换dbttl key: 查询key的生命周期,返回秒数,对于已存在的key[无限期]/不存在的key/过期的key都返回-1expire key int: 设置key的生命周期(秒)pexpire key int: 设置key的生命周期(毫秒)pttl key: 查询key的生命周期(毫秒)persist key: 设置key永久有效 4.2 String命令1234567891011set key value [ex 秒数]/[px 毫秒数] [nx]/[xx] //注意ex和px不要同时写,nx:key不存在时执行操作;xx:key存在时执行操作mset key value [key value]: 一次性设置多个键值mget key [key]: 一次性获取多个键值setrange key offset value: 替换valuegetrange key start end: 获取部分string //下标左数从0开始,右数从-1开始append key value: 在key的原value后添加valuegetset key: 读取旧值并设置新值incr/decr key: 加一/减一incrby/decrby key int:一次加减intincrby/decrbyfloat key float:一次加减floatsetbit key offset value: 偏移量操作(单词大小写相差32)","tags":[]},{"title":"go深入","date":"2018-08-15T07:43:17.000Z","path":"2018/08/15/go深入/","text":"1.main函数和init函数简介:init函数能够在所有的package使用,main函数只能用于package main,这两个函数在定义时不能有任何参数和返回值,每个package中的init函数都是可选的，但package main就必须包含一个main函数。 *main函数引包流程图例子: main.go 12345678910111213141516package mainimport ( \"time\" \"fmt\" \"net/http\" _ \"test/test\")const ( Name = \"main\")func init() &#123; fmt.Printf(\"I am in %s package.\\n\", Name)&#125; test/test.go 12345678910111213package testimport ( \"path/filepath\" \"os\" \"fmt\")var name = \"anker\"func init() &#123; fmt.Printf(\"I am in test package and my name is %s.\\n\", name)&#125; 2.路由绑定与session搭配提供web服务1234567891011121314151617181920212223242526272829303132333435363738package mainimport \"net/http\"func SayHello(w http.ResponseWriter, req *http.Request) &#123; w.Write([]byte(\"hello\"))&#125;func ReadCookieServe(w http.ResponseWriter, req *http.Request) &#123; cookie, err := req.Cookie(\"testcookiename\") if err == nil &#123; cookievalue := cookie.Value w.Write([]byte(\"&lt;b&gt;cookie的值是:\"+cookievalue+\"&lt;/b&gt;\\n\")) &#125; else &#123; w.Write([]byte(\"&lt;b&gt;读取出现错误:\"+err.Error()+\"&lt;/b&gt;\\n\")) &#125;&#125;func WriteCookieServe(w http.ResponseWriter, req *http.Request) &#123; cookie := http.Cookie&#123;Name: \"testcookiename\", Value: \"testcookievalue\", Path: \"/\", MaxAge: 86400&#125; http.SetCookie(w, &amp;cookie) w.Write([]byte(\"&lt;b&gt;设置cookie成功!&lt;/b&gt;\\n\"))&#125;func DeleteCookieServe(w http.ResponseWriter, req *http.Request) &#123; cookie := http.Cookie&#123;Name: \"testcookiename\", Path: \"/\", MaxAge: -1&#125; http.SetCookie(w, &amp;cookie) w.Write([]byte(\"&lt;b&gt;删除cookie成功。&lt;/b&gt;\\n\"))&#125;func main() &#123; http.HandleFunc(\"/\", SayHello) http.HandleFunc(\"/readcookie\", ReadCookieServe) http.HandleFunc(\"/writecookie\", WriteCookieServe) http.HandleFunc(\"/deletecookie\", DeleteCookieServe) http.ListenAndServe(\":8080\", nil)&#125; 3.defer深入123456789101112131415161718192021222324package mainimport ( \"time\" \"fmt\")func trace(funcName string) func() &#123; start := time.Now() fmt.Printf(\"function %s enter\\n\", funcName) return func() &#123; fmt.Printf(\"function %s exit (elapsed %s)\\n\", funcName, time.Since(start)) &#125;&#125;func foo() &#123; defer trace(\"foo()\")() //defer后面的函数值和参数会被求值但实际的函数调用要等到最后 time.Sleep(5*time.Second)&#125;func main() &#123; foo() foo()&#125; 4.表单处理login.tpl123456789101112&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"/login\" method=\"post\"&gt; 用户名:&lt;input type=\"text\" name=\"username\"&gt; 密码:&lt;input type=\"password\" name=\"password\"&gt; &lt;input type=\"submit\" value=\"登录\"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; main.go1234567891011121314151617181920212223242526272829package mainimport ( \"fmt\" \"html/template\" \"log\" \"net/http\" \"strings\")func login(w http.ResponseWriter, r *http.Request) &#123; fmt.Println(\"method:\", r.Method) //获取请求的方法 if r.Method == \"GET\" &#123; t, _ := template.ParseFiles(\"login.gtpl\") log.Println(t.Execute(w, nil)) &#125; else &#123; //请求的是登录数据，那么执行登录的逻辑判断 fmt.Println(\"username:\", r.Form[\"username\"][0]) fmt.Println(\"password:\", r.Form.Get(\"password\")) &#125;&#125;func main() &#123; http.HandleFunc(\"/login\", login) //设置访问的路由 err := http.ListenAndServe(\":8080\", nil) //设置监听的端口 if err != nil &#123; log.Fatal(\"ListenAndServe: \", err) &#125;&#125; 5.数据库操作 说明: go语言没有提供数据库驱动,只提供了接口,常用的mysql数据库驱动为github.com/go-sql-driver/mysql dsn格式: username:password@protocol(address)/dbname?param=value 函数解释:sql.Open()函数用来打开一个注册过的数据库驱动，go-sql-driver中注册了mysql这个数据库驱动db.Prepare()函数用来返回准备要执行的sql操作，然后返回准备完毕的执行状态。db.Query()函数用来直接执行Sql返回Rows结果。stmt.Exec()函数用来执行stmt准备好的SQL语句 数据表结构1234567891011121314CREATE TABLE `userinfo` ( `uid` INT(10) NOT NULL AUTO_INCREMENT, `username` VARCHAR(64) NULL DEFAULT NULL, `department` VARCHAR(64) NULL DEFAULT NULL, `created` DATE NULL DEFAULT NULL, PRIMARY KEY (`uid`));CREATE TABLE `userdetail` ( `uid` INT(10) NOT NULL DEFAULT &apos;0&apos;, `intro` TEXT NULL, `profile` TEXT NULL, PRIMARY KEY (`uid`)) 代码示例12345678910111213141516171819202122232425262728293031323334353637383940package testimport ( _ \"github.com/go-sql-driver/mysql\" \"database/sql\" \"fmt\")func TestDb() &#123; //连接 db, err := sql.Open(\"mysql\", \"root:123456aA@tcp(127.0.0.1:8889)/test1?charset=utf8\") //打开一个注册过的驱动 checkErr(err) //插入数据 stmt, _ := db.Prepare(\"INSERT `userinfo` SET `username`=?, `department`=?, `created`=?\") res, _ := stmt.Exec(\"anker\", \"研发部\", \"2018--08-17\") //insert,update或delete时使用 id, _ := res.LastInsertId() fmt.Println(id) //查询数据 rows, _ := db.Query(\"SELECT * FROM `userinfo`\") for rows.Next() &#123; var uid int var username string var department string var created string err = rows.Scan(&amp;uid, &amp;username, &amp;department, &amp;created) checkErr(err) fmt.Println(uid) fmt.Println(username) fmt.Println(department) fmt.Println(created) &#125;&#125;func checkErr(err error) &#123; if err != nil &#123; panic(err) &#125;&#125; 6.orm操作数据库采用了Go style方式对数据库进行操作，实现了struct到数据表记录的映射。 安装 go get github.com/astaxie/beego 初始化1234567891011func init() &#123; //注册驱动 orm.RegisterDriver(\"mysql\", orm.DRMySQL) //设置默认数据库 orm.RegisterDataBase(\"default\", \"mysql\", \"root:123456aA@tcp(127.0.0.1:8889)/test1?charset=utf8\") //注册定义的model orm.RegisterModel(new(Userinfo)) //create table orm.RunSyncdb(\"default\", false, true)&#125; 完整代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package testimport ( \"github.com/astaxie/beego/orm\" \"fmt\" \"time\")//Model Structtype Userinfo struct &#123; Id int `orm:\"pk;column(uid)\"` //设置主键 Username string Department string Created string&#125;func init() &#123; //注册驱动 orm.RegisterDriver(\"mysql\", orm.DRMySQL) //设置默认数据库 orm.RegisterDataBase(\"default\", \"mysql\", \"root:123456aA@tcp(127.0.0.1:8889)/test1?charset=utf8\") //注册定义的model orm.RegisterModel(new(Userinfo)) //create table orm.RunSyncdb(\"default\", false, true)&#125;func TestOrm() &#123; o := orm.NewOrm() //创建orm对象 userinfo := Userinfo&#123; Username: \"lizengcai\", Department: \"企划部\", Created: time.Now().Format(\"2006-01-02 15:04:05\"), &#125; //插入表 o.Insert(&amp;userinfo) //更新表 userinfo.Id = 8 userinfo.Username = \"anker\" num, err := o.Update(&amp;userinfo, \"username\") fmt.Println(\"Num:\", num, \"Err:\",err) //读取一行 userinfo := Userinfo&#123;Id: 8&#125; o.Read(&amp;userinfo) fmt.Println(userinfo) //按条件获取 var userinfoes []Userinfo qs := o.QueryTable(\"userinfo\") cond := orm.NewCondition() cond = cond.And(\"username\", \"lizengcai\") qs = qs.SetCond(cond) num,_ := qs.All(&amp;userinfoes) fmt.Println(num, userinfoes)&#125;","tags":[]},{"title":"mongodb总结","date":"2018-08-12T12:41:55.000Z","path":"2018/08/12/mongodb总结/","text":"1.简介mongodb是nosql中的一款产品，属于文档型数据库，存储的是文档（Bson,json的二进制化），内部引擎由javascript实现，所有和node.js搭配使用有天然的优势。 数据在存储时是以bson形式进行存储的，查询时数据转换为js对象，并可以通过js语法进行操作。注意事项: MongoDB不支持事务和夺标连接将查询 MongoDB中键值对是有序的,相同的键值对,不同顺序,属于不同的文档 new Date(); 返回日期对象，属于日期类型，Date()函数返回日期字符串，在Shell中操作日期要使用日期类型， 日期类型是包含时区的 2.bin目录文件作用 bsondump: 导出bson结构（可视化转化）mongodump: 整体导出bson数据mongorestore: 导入bsonmongo: 客户端mongod: 服务端mongos: 查询路由，用于分片mongoexport: 导出json,csv,tsv格式mongoimport: 导入bson: 导出bson结构bsondump: 导出bson结构bsondump: 导出bson结构 3.mongod参数说明 –bind_ip 绑定固定ip–bind_ip_all 绑定所有ip–dbpath 数据库存储目录–logpath log file to send write to instead of stdout - has to be a file, not directory–port 指定端口，default 27017–fork fork server process(后台demon运行)–smallfiles 小空间运行–directoryperdb each database will be stored in a separate directory(创建独立子目录)–logappend 追加日志–pidfilepath full path to pidfile,默认不创建–keyFile 集群标识（授权使用）–journal 启用日志–maxConns 最大连接并发数–notablescan 不允许表扫描/bin/mongo dbaddress –port 17720 –eval “db.shutdownServer()”: 关闭服务 4.mongo参数说明 –port/host 连接端口/主机–eval 解析javascript–username 用户名–password 密码–quit be less chatty–shell 运行完文件进入shell 5.相关命令5.1 DDL:123456789101112show dbs/databases: 显示数据库db.dropDatabase(): 删除所在数据库use dbname: 选库/隐式创建数据库show tables/collections: 显示数据表db.getName(): 显示所在数据库名称db.version(): mongo版本db.hostInfo(): 获取mongo所在服务器主机信息db.createCollection(name, &#123;size, capped, max&#125;): 创建表db.collectionName.drop(): 删除表db.listCommands(): 列出数据库命令print(\"hello\"): 打印语句exit 退出mongoClient 5.2 DQL:123456db.collectionName.count(): 统计条数db.collectionName.find([query], [fields]).pretty(): 查看并美化所有数据db.collectionName.find(&#123;'a':'b'&#125;): 条件查询db.collectionName.find(&#123;field:&#123;$lt:ISODate('2018-08-05')&#125;&#125;)[.count()]: 小于2018-08-05的数据[数量]例: db.collectionName.find(&#123;\"age\": &#123;$lt:20&#125;&#125;) //查询条件,相当于select * from collectionName where age &lt; 20db.collectionName.findOne([query], [fields], [options]): 查询一条,相当于select * from users limit 1 5.3 DML:12345678910db.collectionName.insert([&#123;'a': 'b', 'c': 'd'&#125;,&#123;&#125;]): 插入数据db.collectionName.insertOne(obj, &lt;optional&gt;): 插入单条db.collectionName.remove(&#123;query&#125;, true): 条件删除[第一条数据]db.collectionName.remove(&#123;&#125;): 清空集合中所有的文档db.collectionName.save(obj): 集合中不包含id或者id在表中不存在则插入,存在则更新(整体替换)db.collectionName.update(query, obj, upsert bool): upsert为true时,条件存在则更新,不存在则插入obj[此处不包括query插入]例子: db.users.find() //&#123;\"_id\": 5, \"username\": \"test10\"&#125;db.users.update(&#123;\"username\":\"test11\"&#125;, &#123;\"_id\": 6, \"age\": 20, \"gender\": 1&#125;, true)db.users.find() //&#123;\"_id\": 5, \"username\": \"test10\"&#125;, &#123;\"_id\": 6, \"age\": 20, \"gender\": 1&#125; 5.4 Help:123456789db.help(): help on db methodsdb.collectionName.help(): help on collection methodssh.help(): sharding helpersrs.help(): replica set helpershelp admin: administrative helphelp connect: connecting to a db helphelp keys: key shortcutshelp misc: misc things to knowhelp mr: mapreduce 6.修改器,操作符12345678910111213$set（更新字段）$unset(删除字段)、$inc(自增或自减)$and、$or、$in、$nin、$nor、$exists（用于判断文档中是否包含某字段）$push(向数组中尾部添加一个元素)$pushAll(将数组中的所有值push)$addToSet（向set集合中添加元素）$pop(删除数组中的头部或尾部元素) $pull(删除数组中指定的值)$size（根据数组的长度进行筛选）$slice(返回数组中部分元素，如前几个、后几个、中间连续几个元素)$elemMatch(用于匹配数组中的多个条件)$where(自定义筛选条件，效率比较低，需要将bson转为js对象，不能使用索引，可以先使用普通查询过滤掉部分不满足条件 7.索引1234567891011121314db.collectionName.getIndexes(): 获取索引 [ &#123; \"v\" : 2, \"key\" : &#123; \"_id\" : 1 &#125;, \"name\" : \"_id_\", \"ns\" : \"h5maker.users\" &#125; ]db.collectionName.ensureIndex(&#123;field : 1&#125;): //添加索引db.collectionName.dropIndexes(): 删除collectionName上所有的索引db.collectionName.dropIndexes(&#123;name: 1&#125;): 删除collectionName上指定的索引 未完待续…….","tags":[]},{"title":"nginx总结","date":"2018-08-10T08:53:33.000Z","path":"2018/08/10/nginx总结/","text":"1.context:上下文main context: events/httpserver in http, location in server 2.nginx与apache对比4G内存服务器+apache(prefork模式)一般只能处理3000个并发;Nginx 0.8.15 + PHP 5.2.10 (FastCGI) 服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存（15M * 10=150M），开启的64个php-cgi进程消耗1280M内存（20M * 64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M关键是nginx在3万的并发下,仍然速度飞快,所以说同等环境下,nginx是apache连接并发数的10倍. 3.nginx各种错误原因总结502 Bad Gateway: php-fpm后台死掉或没有开启; 4. /etc/init.d/nginx脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#! /bin/bash# chkconfig: - 85 15PATH=/usr/local/openresty/nginxDESC=\"nginx daemon\"NAME=nginxDAEMON=$PATH/sbin/$NAMECONFIGFILE=$PATH/conf/$NAME.confPIDFILE=$PATH/logs/$NAME.pidSCRIPTNAME=/etc/init.d/$NAMEset -e[ -x \"$DAEMON\" ] || exit 0do_start() &#123;$DAEMON -c $CONFIGFILE || echo -n \"nginx already running\"&#125;do_stop() &#123;$DAEMON -s stop || echo -n \"nginx not running\"&#125;do_reload() &#123;$DAEMON -s reload || echo -n \"nginx can't reload\"&#125;case \"$1\" instart)echo -n \"Starting $DESC: $NAME\"do_startecho \".\";;stop)echo -n \"Stopping $DESC: $NAME\"do_stopecho \".\";;reload|graceful)echo -n \"Reloading $DESC configuration...\"do_reloadecho \".\";;restart)echo -n \"Restarting $DESC: $NAME\"do_stopdo_startecho \".\";;*)echo \"Usage: $SCRIPTNAME &#123;start|stop|reload|restart&#125;\" &gt;&amp;2exit 3;;esacexit 0 5.nginx配置5.1 nginx.conf1234567891011121314151617181920212223242526272829303132333435363738user www www;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; upstream unix_tmp_php_cgi_sock &#123; #nginx负载均衡 server unix:/dev/shm/php5-fpm-www1.sock; server unix:/dev/shm/php5-fpm-www2.sock; &#125; include vhost/*.conf; &#125; 5.2 vhost文件夹下server.conf1234567891011121314151617181920212223242526272829303132333435server &#123; listen 80; server_name localhost; location / &#123; root /project/html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; server &#123; listen 8080; server_name localhost; location / &#123; root /project/php; index index.html index.php; &#125; error_page 500 503 504 /50x.html; location /50x.html &#123; root /project/php; &#125; location ~ \\.php &#123; root /project/php; fastcgi_pass unix_tmp_php_cgi_sock; #通过socket连接(存在多个php-fpm线程池则填写负载名称) fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; &#125; 6. 配置解读123#设置允许发布内容为8M(允许上传大小)client_max_body_size 8M;client_body_buffer_size 128k;","tags":[]},{"title":"计划及进度","date":"2018-07-17T16:07:47.000Z","path":"2018/07/18/计划及进度/","text":"计划及进度1.技术go web编程进度: 计划 子模块 总体进度 面向对象 复杂例子 100% go基础 零值 100% 正则表达式1正则表达式2 计划 子模块 总体进度 例子分析 http 10% 2.贸易学习3.读书计划进度: 计划 子模块 总体进度 挪威的森林 绿子 20% 任务1.MHA2.nc的使用3.redis pipline4.redis事物5.redis各数据类型应用场景6.redis分布式7.廖雪峰git学习8.git stash1.1beego系统学习1.2beego数据输出1.3项目及helper整理1.4redis安装1.4ansible中文文档","tags":[]},{"title":"go总结","date":"2018-07-17T09:13:46.000Z","path":"2018/07/17/go总结/","text":"1. 类型:1.1 类型分类: 基本类型:int,float,bool,string; 结构化(复合的)类型:struct,array,slice,map,channel 描述类型分行为:interface type自定义类型:type IZ int ;var a IZ = 5 type定义多自定义类型:12345type ( IZ int FZ fload64 STR string) 1.2 类型转换12int(),float(),bool()[]byte() //字符串转[]byte 1.3 常量与变量1234567891011121314151617181920212223&lt;1&gt;常量: const identifier [type] = valueconst b [string] = \"abc\"定义多常量:const ( Thursday, Friday, Saturday = 4,5,6)&lt;2&gt;变量:var identifier [type] = valuevar a, b *intvar a int = 15var i = 5定义多变量:var ( a int b bool str string c = false d = \"Go says hello to the world\")当变量被声明时,会自动赋予零值:float:0.0bool:false指针: nil 1.4 map,数组,切片与结构体123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;7&gt;map类型:声明: var identifier map[keytype]valuetype例: var mp1 map[string]int //这种方式在使用时需make() 或者: mp2 := map[string]float32&#123;\"C\":5, \"Go\":4.5, \"Python\":4.5, \"C++\":2&#125;&lt;8&gt;数组与切片[数组可以视为键为数字的map]:数组声明: var identifier [len]type例: var arr1 [5]int切片声明: var identifier []type例: arr := [10]&#123;1,2,3,4&#125; sli := [:] //取出所有值 或者: sli := []int&#123;1,2,3,4&#125;&lt;9&gt;结构体:声明: type identifier struct &#123; field1 type1 field2 type2 ....... &#125;赋值: var i identifier i.field1 = int i.field2 = \"string\" 注:此时的t是类型main.identifier指向结构体的指针: 1&gt;var t *identifier t = new(identifier) 2&gt;通常使用: t := new(identifier) t.field1 = 10 t.field2 = 12.3 3&gt;指针赋值: t := &amp;identifier&#123;10, 12.3&#125;举例: package main import ( \"strings\" \"fmt\" ) type Person struct&#123; firstName, lastName string &#125; func upPerson(p *Person) &#123; p.firstName = strings.ToUpper(p.firstName) p.lastName = strings.ToUpper(p.lastName) &#125; func main() &#123; //1-struct as a value type: var pers1 Person pers1.firstName = \"Chris\" pers1.lastName = \"Woodward\" upPerson(&amp;pers1) fmt.Printf(\"%s,%s\\n\", pers1.firstName, pers1.lastName) //2-struct as a pointer: pers2 := new(Person) pers2.firstName = \"Chris\" pers2.lastName = \"Woodward\" (*pers2).lastName = \"Li\" upPerson(pers2) fmt.Printf(\"%s,%s\\n\", pers2.firstName, pers2.lastName) //3-struct as a literal pers3 := &amp;Person&#123;\"Chris\", \"Woodward\"&#125; upPerson(pers3) fmt.Printf(\"%s,%s\",pers3.firstName, pers3.lastName) &#125; 1.5 byte和runeGo语言中byte和rune实质上就是uint8和int32类型。byte用来强调数据是raw data，而不是数字；而rune用来表示Unicode的code point。参考规范： uint8 the set of all unsigned 8-bit integers (0 to 255)int32 the set of all signed 32-bit integers (-2147483648 to 2147483647)byte alias for uint8rune alias for int32 可以通过下面程序验证： 123456789101112131415161718192021222324252627282930package mainimport \"fmt\"func byteSlience(b []byte) []byte &#123; return b&#125;func runeSlience(r []rune) []rune &#123; return r&#125;type Color bytefunc main() &#123; b := []byte&#123;0,1&#125; u8 := []uint8&#123;2, 3&#125; fmt.Printf(\"%T,%T\\n\", b, u8) fmt.Println(byteSlience(b)) fmt.Println(byteSlience(u8)) r := []rune&#123;4,5&#125; i32 := []int32&#123;6,7&#125; fmt.Printf(\"%T,%T\\n\", r, i32) fmt.Println(runeSlience(r)) fmt.Println(runeSlience(i32)) c := Color(3) fmt.Printf(\"%T\\n\", c) fmt.Println(c)&#125; 运行结果如下: 12345678[]uint8,[]uint8[0 1][2 3][]int32,[]int32[4 5][6 7]main.Color3 2. sprintf的使用2.1 定义示例类型和变量12345type Human struct &#123; Name string&#125;var people = Human&#123;Name:\"zhangsan\"&#125; 2.2 普通占位符123456占位符 说明 举例 输出%v 相应值的默认格式。 Printf(\"%v\", people) &#123;zhangsan&#125;，%+v 打印结构体时，会添加字段名 Printf(\"%+v\", people) &#123;Name:zhangsan&#125;%#v 相应值的Go语法表示 Printf(\"#v\", people) main.Human&#123;Name:\"zhangsan\"&#125;%T 相应值的类型的Go语法表示 Printf(\"%T\", people) main.Human%% 字面上的百分号，并非值的占位符 Printf(\"%%\") % 2.3 布尔占位符12占位符 说明 举例 输出%t true 或 false。 Printf(\"%t\", true) true 2.4 整数占位符123456789占位符 说明 举例 输出%b 二进制表示 Printf(\"%b\", 5) 101%c 相应Unicode码点所表示的字符 Printf(\"%c\", 0x4E2D) 中%d 十进制表示 Printf(\"%d\", 0x12) 18%o 八进制表示 Printf(\"%d\", 10) 12%q 单引号围绕的字符字面值，由Go语法安全地转义 Printf(\"%q\", 0x4E2D) '中'%x 十六进制表示，字母形式为小写 a-f Printf(\"%x\", 13) d%X 十六进制表示，字母形式为大写 A-F Printf(\"%x\", 13) D%U Unicode格式：U+1234，等同于 \"U+%04X\" Printf(\"%U\", 0x4E2D) U+4E2D 2.5 浮点数和复数的组成部分（实部和虚部）12345678占位符 说明 举例 输出%b 无小数部分的，指数为二的幂的科学计数法， 与 strconv.FormatFloat 的 'b' 转换格式一致。例如 -123456p-78%e 科学计数法，例如 -1234.456e+78 Printf(\"%e\", 10.2) 1.020000e+01%E 科学计数法，例如 -1234.456E+78 Printf(\"%e\", 10.2) 1.020000E+01%f 有小数点而无指数，例如 123.456 Printf(\"%f\", 10.2) 10.200000%g 根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出 Printf(\"%g\", 10.20) 10.2%G 根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出 Printf(\"%G\", 10.20+2i) (10.2+2i) 2.6 字符串和字节切片12345占位符 说明 举例 输出%s 输出字符串表示（string类型或[]byte) Printf(\"%s\", []byte(\"Go语言\")) Go语言%q 双引号围绕的字符串，由Go语法安全地转义 Printf(\"%q\", \"Go语言\") \"Go语言\"%x 十六进制，小写字母，每字节两个字符 Printf(\"%x\", \"golang\") 676f6c616e67%X 十六进制，大写字母，每字节两个字符 Printf(\"%X\", \"golang\") 676F6C616E67 2.7 指针12占位符 说明 举例 输出%p 十六进制表示，前缀 0x Printf(\"%p\", &amp;people) 0x4f57f0 2.8 其他标记123456789101112占位符 说明 举例 输出+ 总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。 Printf(\"%+q\", \"中文\") \"\\u4e2d\\u6587\"- 在右侧而非左侧填充空格（左对齐该区域）# 备用格式：为八进制添加前导 0（%#o） Printf(\"%#U\", '中') U+4E2D 为十六进制添加前导 0x（%#x）或 0X（%#X），为 %p（%#p）去掉前导 0x； 如果可能的话，%q（%#q）会打印原始 （即反引号围绕的）字符串； 如果是可打印字符，%U（%#U）会写出该字符的 Unicode 编码形式（如字符 x 会被打印成 U+0078 'x'）。' ' (空格)为数值中省略的正负号留出空白（% d）； 以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开0 填充前导的0而非空格；对于数字，这会将填充移到正负号之后","tags":[]}]