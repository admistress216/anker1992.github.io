[{"title":"mongodb总结","date":"2018-08-12T12:41:55.000Z","path":"2018/08/12/mongodb总结/","text":"1.简介mongodb是nosql中的一款产品，属于文档型数据库，存储的是文档（Bson,json的二进制化），内部引擎由javascript实现，所有和node.js搭配使用有天然的优势。 数据在存储时是以bson形式进行存储的，查询时数据转换为js对象，并可以通过js语法进行操作。注意事项: MongoDB不支持事务和夺标连接将查询 MongoDB中键值对是有序的,相同的键值对,不同顺序,属于不同的文档 new Date(); 返回日期对象，属于日期类型，Date()函数返回日期字符串，在Shell中操作日期要使用日期类型， 日期类型是包含时区的 2.bin目录文件作用 bsondump: 导出bson结构（可视化转化）mongodump: 整体导出bson数据mongorestore: 导入bsonmongo: 客户端mongod: 服务端mongos: 查询路由，用于分片mongoexport: 导出json,csv,tsv格式mongoimport: 导入bson: 导出bson结构bsondump: 导出bson结构bsondump: 导出bson结构 3.mongod参数说明 –bind_ip 绑定固定ip–bind_ip_all 绑定所有ip–dbpath 数据库存储目录–logpath log file to send write to instead of stdout - has to be a file, not directory–port 指定端口，default 27017–fork fork server process(后台demon运行)–smallfiles 小空间运行–directoryperdb each database will be stored in a separate directory(创建独立子目录)–logappend 追加日志–pidfilepath full path to pidfile,默认不创建–keyFile 集群标识（授权使用）–journal 启用日志–maxConns 最大连接并发数–notablescan 不允许表扫描/bin/mongo dbaddress –port 17720 –eval “db.shutdownServer()”: 关闭服务 4.mongo参数说明 –port/host 连接端口/主机–eval 解析javascript–username 用户名–password 密码–quit be less chatty–shell 运行完文件进入shell 5.相关命令5.1 DDL:123456789101112show dbs/databases: 显示数据库db.dropDatabase(): 删除所在数据库use dbname: 选库/隐式创建数据库show tables/collections: 显示数据表db.getName(): 显示所在数据库名称db.version(): mongo版本db.hostInfo(): 获取mongo所在服务器主机信息db.createCollection(name, &#123;size, capped, max&#125;): 创建表db.collectionName.drop(): 删除表db.listCommands(): 列出数据库命令print(\"hello\"): 打印语句exit 退出mongoClient 5.2 DQL:123456db.collectionName.count(): 统计条数db.collectionName.find([query], [fields]).pretty(): 查看并美化所有数据db.collectionName.find(&#123;'a':'b'&#125;): 条件查询db.collectionName.find(&#123;field:&#123;$lt:ISODate('2018-08-05')&#125;&#125;)[.count()]: 小于2018-08-05的数据[数量]例: db.collectionName.find(&#123;\"age\": &#123;$lt:20&#125;&#125;) //查询条件,相当于select * from collectionName where age &lt; 20db.collectionName.findOne([query], [fields], [options]): 查询一条,相当于select * from users limit 1 5.3 DML:12345678910db.collectionName.insert([&#123;'a': 'b', 'c': 'd'&#125;,&#123;&#125;]): 插入数据db.collectionName.insertOne(obj, &lt;optional&gt;): 插入单条db.collectionName.remove(&#123;query&#125;, true): 条件删除[第一条数据]db.collectionName.remove(&#123;&#125;): 清空集合中所有的文档db.collectionName.save(obj): 集合中不包含id或者id在表中不存在则插入,存在则更新(整体替换)db.collectionName.update(query, obj, upsert bool): upsert为true时,条件存在则更新,不存在则插入obj[此处不包括query插入]例子: db.users.find() //&#123;\"_id\": 5, \"username\": \"test10\"&#125;db.users.update(&#123;\"username\":\"test11\"&#125;, &#123;\"_id\": 6, \"age\": 20, \"gender\": 1&#125;, true)db.users.find() //&#123;\"_id\": 5, \"username\": \"test10\"&#125;, &#123;\"_id\": 6, \"age\": 20, \"gender\": 1&#125; 5.4 Help:123456789db.help(): help on db methodsdb.collectionName.help(): help on collection methodssh.help(): sharding helpersrs.help(): replica set helpershelp admin: administrative helphelp connect: connecting to a db helphelp keys: key shortcutshelp misc: misc things to knowhelp mr: mapreduce 6.修改器,操作符12345678910111213$set（更新字段）$unset(删除字段)、$inc(自增或自减)$and、$or、$in、$nin、$nor、$exists（用于判断文档中是否包含某字段）$push(向数组中尾部添加一个元素)$pushAll(将数组中的所有值push)$addToSet（向set集合中添加元素）$pop(删除数组中的头部或尾部元素) $pull(删除数组中指定的值)$size（根据数组的长度进行筛选）$slice(返回数组中部分元素，如前几个、后几个、中间连续几个元素)$elemMatch(用于匹配数组中的多个条件)$where(自定义筛选条件，效率比较低，需要将bson转为js对象，不能使用索引，可以先使用普通查询过滤掉部分不满足条件 7.索引1234567891011121314db.collectionName.getIndexes(): 获取索引 [ &#123; \"v\" : 2, \"key\" : &#123; \"_id\" : 1 &#125;, \"name\" : \"_id_\", \"ns\" : \"h5maker.users\" &#125; ]db.collectionName.ensureIndex(&#123;field : 1&#125;): //添加索引db.collectionName.dropIndexes(): 删除collectionName上所有的索引db.collectionName.dropIndexes(&#123;name: 1&#125;): 删除collectionName上指定的索引 未完待续…….","tags":[]}]